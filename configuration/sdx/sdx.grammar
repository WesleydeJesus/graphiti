/*
 * Copyright (c) 2008, IETR/INSA of Rennes
 * All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 *   * Redistributions of source code must retain the above copyright notice,
 *     this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *   * Neither the name of the IETR/INSA of Rennes nor the names of its
 *     contributors may be used to endorse or promote products derived from this
 *     software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
 * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
 * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

%header%

GRAMMARTYPE = "LL"

DESCRIPTION = "A grammar for SDX files."

AUTHOR      = "Matthieu Wipliez"
VERSION     = "1.0"
DATE        = "October, 31st, 2008"

LICENSE     = "Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

  * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.
  * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.
  * Neither the name of the IETR/INSA of Rennes nor the names of its
    contributors may be used to endorse or promote products derived from this
    software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
SUCH DAMAGE."

COPYRIGHT   = "Copyright (c) 2008, IETR/INSA of Rennes. All rights reserved."


%tokens%

ABSOLUTE                 = "absolute"
ACTUATOR                 = "actuator"
TOK_ALGORITHM            = "algorithm"
APPLICATION              = "application"
TOK_ARCHITECTURE         = "architecture"
ATTACH_ALL               = "attach_all"
ATTACH_CONDI             = "attach_condi"
ATTACH_CONDO             = "attach_condo"
ATTACH_EXPLODE           = "attach_explode"
ATTACH_IMPLODE           = "attach_implode"
ATTACH_REF               = "attach_ref"
BROADCAST                = "broadcast"
TOK_CODE_PHASES          = "code_phases"
TOK_CONDITIONS           = "conditions"
CONNECTIONS              = "connections"
CONSTANT                 = "constant"
TOK_CONSTRAINT           = "constraint"
TOK_DEFINITION           = "def"
TOK_DEPENDENCIES         = "dependences"
TOK_DESCRIPTION          = "description"
ENDSEQ                   = "endseq"
EXTRA_DURATIONS_MEDIA    = "extra_durations_media"
EXTRA_DURATIONS_OPERATOR = "extra_durations_operator"
GATE                     = "gate"
INCLUDE                  = "include"
INITSEQ                  = "initseq"
INTERNAL                 = "internal"
LOOPSEQ                  = "loopseq"
MAIN                     = "main"
TOK_MEDIA                = "media"
MEDIAS                   = "medias"
MEMORY                   = "memory"
NO_BROADCAST             = "no_broadcast"
ON                       = "on"
TOK_OPERATOR             = "operator"
OPERATORS                = "operators"
PRECEDENCE               = "precedence"
RAM                      = "ram"
REFERENCES               = "references"
SAMMP                    = "sammp"
SAMPP                    = "sampp"
SAM                      = "sam"
SENSOR                   = "sensor"
SOFTWARE_COMPONENT       = "software_component"
STRONG_PRECEDENCE_DATA   = "strong_precedence_data"
TOK_SYNDEX_VERSION       = "syndex_version"
TRUE                     = "true"

AMPERSAND          = "&"
ARROW              = "->"
AT                 = "@"
COLON              = ":"
COLON_EQUAL        = ":="
COMMA              = ","
DIFFERENT          = "!="
DIV                = "/"
DOT                = "."
DOUBLE_DASH_ARROW  = "-->"
DOUBLE_EQUAL_ARROW = "==>"
DOUBLE_DOT         = ".."
DOUBLE_COLON       = "::"
EQUAL              = "="
EXCLAMATION        = "!"
GE                 = ">="
GT                 = ">"
ID                 = <<[a-zA-Z_$][a-zA-Z0-9_$]*>>
LBRACE             = "{"
LBRACKET           = "["
LPAREN             = "("
LE                 = "<="
LT                 = "<"
MINUS              = "-"
NUMBER             = <<[0-9]+>>
PERCENT            = "%"
PLUS               = "+"
QUESTION           = "?"
RBRACE             = "}"
RBRACKET           = "]"
RPAREN             = ")"
SEMICOLON          = ";"
SHARP              = "#"
STRING             = <<"([^\\"]*(\\[tnr\\"])?)*">>
TIMES              = "*"

LINE_COMMENT       = <<#[^\r\n]*(\r|\n|\r\n)>> %ignore%
WHITESPACE         = <<[ \t\r\n]+>> %ignore%

%productions%

SdxFile = Header Library* Definition* MainAlgorithm? MainArchitecture?
  // ExtraDuration* OperationGroup* Constraint*
  ;

///////////////////////////////////////////////////////////////////////////////
// HEADER & LIBRARIES

Header = SynDExVersion ApplicationDescription ;

SynDExVersion = TOK_SYNDEX_VERSION COLON STRING ;

ApplicationDescription = APPLICATION TOK_DESCRIPTION COLON STRING ;

Library = INCLUDE STRING SEMICOLON ;

///////////////////////////////////////////////////////////////////////////////
// DEFINITION

Definition = TOK_DEFINITION DefinitionType ;

DefinitionType = MEMORY ID LBRACKET NUMBER DOUBLE_DOT NUMBER RBRACKET Algorithm 
  | AlgorithmType ID Algorithm ;
  // | TOK_DEFINITION TOK_OPERATOR Operator
  // | TOK_DEFINITION TOK_MEDIA Medium
  // | TOK_DEFINITION TOK_ARCHITECTURE Architecture ;

///////////////////////////////////////////////////////////////////////////////
// ALGORITHM

AlgorithmType = ACTUATOR
  | TOK_ALGORITHM 
  | CONSTANT 
  | INTERNAL 
  | SENSOR ;

Algorithm = ParameterDefinitions? Coordinates? COLON Port* ConditionedAlgorithm* 
		  CodePhases? Description? ;

ParameterDefinitions = LT (ID (SEMICOLON ID)*)? GT ;

Coordinates = NUMBER COMMA NUMBER ;

// ports
Port = PortDirection ID LBRACKET Expression RBRACKET ID NUMBER AT Coordinates SEMICOLON ;

PortDirection = QUESTION
		| EXCLAMATION
		| AMPERSAND ;

// conditions

ConditionedAlgorithm = Conditions REFERENCES COLON Reference+
  TOK_DEPENDENCIES COLON Dependency+ ;

Conditions = TOK_CONDITIONS COLON Condition SEMICOLON ;

Condition = TRUE
  | ID EQUAL Expression;

Reference = CompoundId Parameters? ID AT Coordinates SEMICOLON ;

Dependency = DependencyType Endpoint ARROW Endpoint SEMICOLON ;

DependencyType = STRONG_PRECEDENCE_DATA
  | PRECEDENCE ;

Endpoint = ID (DOT ID)? ;

// code phases
CodePhases = TOK_CODE_PHASES COLON CodePhase* SEMICOLON ;

CodePhase = ENDSEQ | INITSEQ | LOOPSEQ ;

// description
Description = TOK_DESCRIPTION COLON STRING ;

///////////////////////////////////////////////////////////////////////////////
// MAIN

MainAlgorithm = MAIN TOK_ALGORITHM ID Parameters SEMICOLON ;

MainArchitecture = MAIN TOK_ARCHITECTURE CompoundId SEMICOLON ;

CompoundId = ID (DIV ID)? ;

///////////////////////////////////////////////////////////////////////////////
// PARAMETERS

Parameters = LT ParameterList? GT ;

ParameterList = Expression (SEMICOLON Expression)* ;

///////////////////////////////////////////////////////////////////////////////
// EXPRESSION

Expression = Factor (ExpressionRest)* ;

ExpressionRest = PLUS Factor
  | MINUS Factor
  | TIMES Factor
  | DIV Factor ;

Factor = Atom
  | LPAREN Expression RPAREN ;

Atom = NUMBER
  | STRING
  | ID ;

///////////////////////////////////////////////////////////////////////////////
// EXTRA DURATION

// ExtraDuration = NUMBER ;

///////////////////////////////////////////////////////////////////////////////
// OPERATION GROUP

// OperationGroup = NUMBER ;

///////////////////////////////////////////////////////////////////////////////
// CONSTRAINT

// Constraint = NUMBER ;
